################################################################
# Global default parameters (will be used if not overridden in robot-specific sections)
################################################################
amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.005
    alpha2: 0.005
    alpha3: 0.01
    alpha4: 0.005
    alpha5: 0.005
    base_frame_id: "base_footprint"  
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: true
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 40.0
    laser_min_range: 0.1
    laser_model_type: "likelihood_field"
    max_beams: 30
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"  
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.1
    recovery_alpha_slow: 0.05
    resample_interval: 3
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 2.0
    update_min_a: 0.5
    update_min_d: 0.5
    z_hit: 0.8
    z_max: 0.05
    z_rand: 0.2
    z_short: 0.05
    scan_topic: scan      
    buffer_size: 3000
    buffer_timeout: 45.0

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_footprint  
    odom_topic: odom               
    bt_loop_duration: 30
    default_server_timeout: 90
    wait_for_service_timeout: 1500
    transform_tolerance: 2.0
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_navigate_to_pose_action_bt_node

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    
    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.15
      yaw_goal_tolerance: 0.1
    
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.7
      max_vel_y: 0.0
      max_vel_theta: 0.7
      min_speed_xy: 0.0
      max_speed_xy: 0.7
      min_speed_theta: 0.0
      acc_lim_x: 1.0
      acc_lim_y: 0.0
      acc_lim_theta: 1.0
      decel_lim_x: -1.0
      decel_lim_y: 0.0
      decel_lim_theta: -1.0
      vx_samples: 25
      vy_samples: 5
      vtheta_samples: 25
      sim_time: 1.5
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.5
      xy_goal_tolerance: 0.15
      path_follow_tolerance: 0.2
      trans_stopped_velocity: 0.01
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 12.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 8.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 16.0
      RotateToGoal.scale: 12.0
      RotateToGoal.slowing_factor: -1.0
      RotateToGoal.lookahead_time: -1.0
      ObstacleFootprint.scale: 1.0
      ObstacleFootprint.max_scaling_factor: 0.4 
      ObstacleFootprint.scaling_distance: 2.0    

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: map
      robot_base_frame: base_footprint
      rolling_window: true
      width: 5
      height: 5
      resolution: 0.1
      robot_radius: 0.35
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        map_topic: "/map"
        transform_tolerance: 2.0
        subscribe_to_updates: true
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
          obstacle_max_range: 4.5
          obstacle_min_range: 0.0
          observation_persistence: 0.0
          inf_is_valid: false
          filter_speckles: true
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 8.0
        inflation_radius: 0.4
      always_send_full_costmap: True
      transform_tolerance: 2.0
      transform_timeout: 0.5
      message_queue_size: 100

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: True
      robot_radius: 0.35
      resolution: 0.1
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          observation_persistence: 0.0
          inf_is_valid: false
          filter_speckles: true
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        map_topic: "/map"
        transform_tolerance: 2.0
        subscribe_to_updates: true
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 5.0
        inflation_radius: 0.4
      always_send_full_costmap: True
      transform_tolerance: 2.0
      transform_timeout: 0.5
      message_queue_size: 100

planner_server:
  ros__parameters:
    expected_planner_frequency: 5.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true
      
velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 10.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.7, 0.0, 0.7]
    min_velocity: [-0.7, 0.0, -0.7]
    max_accel: [1.0, 0.0, 1.0]
    max_decel: [-1.0, 0.0, -1.0]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

################################################################
# Robot-specific parameters
################################################################

robot_0:
  amcl:
    ros__parameters:
      odom_frame_id: "robot_0/odom"
      base_frame_id: "robot_0/base_footprint"
      global_frame_id: "map"
      
  bt_navigator:
    ros__parameters:
      odom_topic: "/robot_0/odom"
      robot_base_frame: "robot_0/base_footprint"
      
  controller_server:
    ros__parameters:
      robot_base_frame: "robot_0/base_footprint"
      
  local_costmap:
    local_costmap:
      ros__parameters:
        robot_base_frame: "robot_0/base_footprint"
        obstacle_layer:
          scan:
            topic: /robot_0/scan
            
  global_costmap:
    global_costmap:
      ros__parameters:
        robot_base_frame: "robot_0/base_footprint"
        obstacle_layer:
          scan:
            topic: /robot_0/scan
            
  planner_server:
    ros__parameters:
      robot_base_frame: "robot_0/base_footprint"
      
  velocity_smoother:
    ros__parameters:
      odom_topic: "/robot_0/odom"

robot_1:
  amcl:
    ros__parameters:
      odom_frame_id: "robot_1/odom"
      base_frame_id: "robot_1/base_footprint"
      global_frame_id: "map"
      
  bt_navigator:
    ros__parameters:
      odom_topic: "/robot_1/odom"
      robot_base_frame: "robot_1/base_footprint"
      
  controller_server:
    ros__parameters:
      robot_base_frame: "robot_1/base_footprint"
      
  local_costmap:
    local_costmap:
      ros__parameters:
        robot_base_frame: "robot_1/base_footprint"
        obstacle_layer:
          scan:
            topic: /robot_1/scan
            
  global_costmap:
    global_costmap:
      ros__parameters:
        robot_base_frame: "robot_1/base_footprint"
        obstacle_layer:
          scan:
            topic: /robot_1/scan
            
  planner_server:
    ros__parameters:
      robot_base_frame: "robot_1/base_footprint"
      
  velocity_smoother:
    ros__parameters:
      odom_topic: "/robot_1/odom"

robot_2:
  amcl:
    ros__parameters:
      odom_frame_id: "robot_2/odom"
      base_frame_id: "robot_2/base_footprint"
      global_frame_id: "map"
      
  bt_navigator:
    ros__parameters:
      odom_topic: "/robot_2/odom"
      robot_base_frame: "robot_2/base_footprint"
      
  controller_server:
    ros__parameters:
      robot_base_frame: "robot_2/base_footprint"
      
  local_costmap:
    local_costmap:
      ros__parameters:
        robot_base_frame: "robot_2/base_footprint"
        obstacle_layer:
          scan:
            topic: /robot_2/scan
            
  global_costmap:
    global_costmap:
      ros__parameters:
        robot_base_frame: "robot_2/base_footprint"
        obstacle_layer:
          scan:
            topic: /robot_2/scan
            
  planner_server:
    ros__parameters:
      robot_base_frame: "robot_2/base_footprint"
      
  velocity_smoother:
    ros__parameters:
      odom_topic: "/robot_2/odom"